#!/bin/bash

. /usr/local/lib/docker_utils/internal_docker_run.sh
. /usr/local/lib/docker_utils/docker_run.sh
. /usr/local/lib/iptables_utils/allow_client.sh
. /usr/local/lib/reverse_proxy/create_reverse_proxy.sh
. /usr/local/lib/knock_utils/gen_knock_rules.sh

PUBLIC_INTERFACE="eth0"

function secure_docker_run() {
  local CONTAINER_NAME="$1"
  local SERVICE_PORT="$2"
  local INTERNAL_NETWORK="$3"
  local IMAGE_NAME="$4"
  local PUBLIC_NETWORK="$5"
  local PUBLIC_PORT="$6"
  local SEQUENCE="$7"
  local PROTOCOL="$8"
  local EXTRA_OPTS="$9"

  local CONTAINER_IP=$(docker_run "$CONTAINER_NAME" "$SERVICE_PORT" "$INTERNAL_NETWORK" "$IMAGE_NAME" "$EXTRA_OPTS")

  local OPEN_COMMAND="/usr/local/sbin/iptables-allow_forward_to_server $PROTOCOL $PUBLIC_NETWORK $PUBLIC_PORT %IP% $CONTAINER_IP $SERVICE_PORT"
  local CLOSE_COMMAND="/usr/local/sbin/iptables-deny_forward_to_server $PROTOCOL $PUBLIC_NETWORK $PUBLIC_PORT %IP% $CONTAINER_IP $SERVICE_PORT"

  gen_knock_rules "$CONTAINER_NAME" "$SEQUENCE" "$OPEN_COMMAND" "$CLOSE_COMMAND"

  systemctl restart knockd
}

function create_docker_registry() {
  secure_docker_run "registry" "5000" "registry" "registry:2" "${PUBLIC_INTERFACE}" "2001" "1001 2002 3003" "tcp"
  allow_client "tcp" "internal" "5000"
}

function create_deploy_service() {
    mkdir -p /root/deploy-service/deploy/pending || true
    mkdir -p /root/deploy-service/deploy/done || true
    rm /root/deploy-service/deploy/instances.json

    EXTRA_OPTS="--mount type=bind,source=/root/deploy-service/deploy/pending,target=/etc/pending-deploys"
    secure_docker_run "deploy-service" "8080" "deploy_service" "deploy-service" "${PUBLIC_INTERFACE}" "2002" "4004 5005 6006" "tcp" "$EXTRA_OPTS"
}

function create_prometheus_server() {
  rm /etc/adlamin/monitor/prometheus.yml || true
  cp /etc/adlamin/monitor/empty_prometheus.yml /etc/adlamin/monitor/prometheus.yml
  docker_run "prometheus" "9090" "internal" "prom/prometheus" "-v /etc/adlamin/monitor/prometheus.yml:/etc/prometheus/prometheus.yml -v /etc/adlamin/monitor/data:/prometheus"
}

function create_grafana_server() {
  secure_docker_run "grafana" "3000" "internal" "grafana/grafana" "${PUBLIC_INTERFACE}" "2003" "7007 8008 9009" "tcp"
}

create_reverse_proxy "dmz" "80" "dmz" "nginx" "tcp" "${PUBLIC_INTERFACE}" "80"
create_docker_registry
create_deploy_service
create_prometheus_server
create_grafana_server